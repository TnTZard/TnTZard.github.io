<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr Xie</title>
  
  <subtitle>talk is cheap, show me your code</subtitle>
  <link href="http://xieziqi.xyz/atom.xml" rel="self"/>
  
  <link href="http://xieziqi.xyz/"/>
  <updated>2021-01-08T03:22:24.497Z</updated>
  <id>http://xieziqi.xyz/</id>
  
  <author>
    <name>TnTZard</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈HashMap</title>
    <link href="http://xieziqi.xyz/2021/01/07/%E6%B5%85%E8%B0%88HashMap/"/>
    <id>http://xieziqi.xyz/2021/01/07/%E6%B5%85%E8%B0%88HashMap/</id>
    <published>2021-01-07T12:46:26.000Z</published>
    <updated>2021-01-08T03:22:24.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈HashMap"><a href="#浅谈HashMap" class="headerlink" title="浅谈HashMap"></a>浅谈HashMap</h1><h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><p>取数组和链表的优，减少Hash的劣</p><h4 id="关于Hash算法和Hash表结构"><a href="#关于Hash算法和Hash表结构" class="headerlink" title="关于Hash算法和Hash表结构"></a>关于Hash算法和Hash表结构</h4><p>Hash也叫做散列，哈希。基本原理就是把任意长度的输入，通过Hash算法变成固定长度的输出。</p><p>一些经典的Hash算法：MD5、SHA</p><p>Hash算法的要求：1.从Hash值不可以反向推导出原始的数据。2.输入数据的微小变化会得到完全不同的hash值，相同的数据得到相同的值。3.Hash算法的执行效率要高效，长的文本也能快速地计算出Hash值。4.Hash算法的冲突概率要小</p><h5 id="为什么会冲突"><a href="#为什么会冲突" class="headerlink" title="为什么会冲突?"></a>为什么会冲突?</h5><a id="more"></a> <p>抽屉原理，</p><h5 id="Hash碰撞的解决方案"><a href="#Hash碰撞的解决方案" class="headerlink" title="Hash碰撞的解决方案"></a>Hash碰撞的解决方案</h5><p>首先明确的一点是：<strong>Hash算法是一定会有冲突的</strong></p><h6 id="链地址法"><a href="#链地址法" class="headerlink" title="链地址法"></a>链地址法</h6><p>链表地址法是使用了一个链表数组，来存储相应的数据，当hash遇到冲突的时候依次添加到链表的后面进行处理</p><pre class=" language-java"><code class="language-java">添加一个元素的时候，首先计算元素key的Hash值，确定插入数组中的位置。如果当前位置下没有重复数据，则直接添加到当前位置。当遇到冲突的时候，添加到同一个hash值的元素后面，形成一个链表。这个链表的特点是同一个链表上的hash值相同。JDK1<span class="token number">.8</span>中，针对链表上的数据超过<span class="token number">8</span>条时，使用了红黑树进行优化。</code></pre><p>JAVA中的HashMap使用的就是这种方法</p><h6 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h6><p>简单介绍下，之后再去学习看看</p><p>一旦发生冲突，就去寻找下一个空的 散列表地址，只要散列表足够大，空的散列地址总能找到</p><h4 id="1-7-vs-1-8"><a href="#1-7-vs-1-8" class="headerlink" title="1.7 vs 1.8"></a>1.7 vs 1.8</h4><p>简而言之，1.7就是简单的实现了数组加链表的结构，但是存在一些问题和安全隐患，其实JDK明确说明了HashMap是线程不安全的，不适用于多线程的环境中，但是1.7的HashMap在多线程下的使用发生问题的概率很大，其中比较常见的一个问题就是死锁，造成死锁的原因在于：在修改HashMap时，可能会进行扩容操作，而1.7的扩容操作是<strong>头插法</strong>（看到网上都是这种说法）,在改变某一个桶中链表元素的位置时，后移动的放在了前面的前头，意思就是两个数据的位置交换了，就有可能头尾相连一直顺着查下去，造成死锁。</p><p>当然这不是JDK的锅，明明强调了不能在多线程下使用。</p><p>这个问题在1.8中得到优化，但是HashMap仍然不是线程安全的，多线程下请移步ConcurrentHashMap。</p><h4 id="常量的定义"><a href="#常量的定义" class="headerlink" title="常量的定义"></a>常量的定义</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * The default initial capacity - MUST be a power of two.     */</span><span class="token comment" spellcheck="true">// 默认容量</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span><span class="token comment" spellcheck="true">/**     * The maximum capacity, used if a higher value is implicitly specified     * by either of the constructors with arguments.     * MUST be a power of two &lt;= 1&lt;&lt;30.     */</span><span class="token comment" spellcheck="true">// 最大容量</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**     * The load factor used when none specified in constructor.     */</span><span class="token comment" spellcheck="true">// 默认负载因子</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**     * The bin count threshold for using a tree rather than list for a     * bin.  Bins are converted to trees when adding an element to a     * bin with at least this many nodes. The value must be greater     * than 2 and should be at least 8 to mesh with assumptions in     * tree removal about conversion back to plain bins upon     * shrinkage.     */</span><span class="token comment" spellcheck="true">// 树化阈值</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span></code></pre><h2 id="源码学习"><a href="#源码学习" class="headerlink" title="源码学习"></a>源码学习</h2><h4 id="PUT方法"><a href="#PUT方法" class="headerlink" title="PUT方法"></a>PUT方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>               <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化桶数组table table被延迟到插入新数据时再初始化</span>    <span class="token comment" spellcheck="true">// 如果数组（哈希表）为null或者长度为0，则进行数组初始化操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果桶中不包含键值对节点引用，则将新键值对节点的引用存入桶中即可</span>    <span class="token comment" spellcheck="true">// 根据key的哈希值计算出数据插入数组的下标位置，公式为 (n-1) &amp; hash</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 如果该下标位置还没有元素，则直接创建Node对象，并插入</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果目标位置key已经存在，则直接覆盖</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果目标位置key不存在，并且节点为红黑树，则插入红黑树中</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 否则为链表结构，遍历链表，尾部插入</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 如果链表长度大于等于TREEIFY_THRESHOLD，则考虑转换为红黑树</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1 for 1st</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转换为红黑树操作，内部还会判断数组长度</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 如果链表中已经存在该key的话，直接覆盖替换</span>                <span class="token comment" spellcheck="true">// 条件为 true 表示当前链表包含要插入的键值对 终止遍历</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断要插入的键值对是否存在HashMap中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// existing mapping for key</span>            V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// onlyIfAbsent 表示是否仅在oldValue为null的情况下更新键值对的值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 键值对数量超过阈值时，则进行扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="扩容部分代码"><a href="#扩容部分代码" class="headerlink" title="扩容部分代码"></a>扩容部分代码</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Initializes or doubles table size.  If null, allocates in     * accord with initial capacity target held in field threshold.     * Otherwise, because we are using power-of-two expansion, the     * elements from each bin must either stay at same index, or move     * with a power of two offset in the new table.     *      * @return the table     */</span><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果容量大于0，意思就是容量不为空，则说明已经初始化</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果容量达到最大 (1 &lt;&lt; 30) 则不再扩容</span>        <span class="token comment" spellcheck="true">// static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 按旧容量和阈值的2倍计算新容量和阈值</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                 oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double threshold</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// initial capacity was placed in threshold</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// zero initial threshold signifies using defaults</span>        newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>                  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// preserve order</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;浅谈HashMap&quot;&gt;&lt;a href=&quot;#浅谈HashMap&quot; class=&quot;headerlink&quot; title=&quot;浅谈HashMap&quot;&gt;&lt;/a&gt;浅谈HashMap&lt;/h1&gt;&lt;h2 id=&quot;设计思想&quot;&gt;&lt;a href=&quot;#设计思想&quot; class=&quot;headerlink&quot; title=&quot;设计思想&quot;&gt;&lt;/a&gt;设计思想&lt;/h2&gt;&lt;p&gt;取数组和链表的优，减少Hash的劣&lt;/p&gt;
&lt;h4 id=&quot;关于Hash算法和Hash表结构&quot;&gt;&lt;a href=&quot;#关于Hash算法和Hash表结构&quot; class=&quot;headerlink&quot; title=&quot;关于Hash算法和Hash表结构&quot;&gt;&lt;/a&gt;关于Hash算法和Hash表结构&lt;/h4&gt;&lt;p&gt;Hash也叫做散列，哈希。基本原理就是把任意长度的输入，通过Hash算法变成固定长度的输出。&lt;/p&gt;
&lt;p&gt;一些经典的Hash算法：MD5、SHA&lt;/p&gt;
&lt;p&gt;Hash算法的要求：1.从Hash值不可以反向推导出原始的数据。2.输入数据的微小变化会得到完全不同的hash值，相同的数据得到相同的值。3.Hash算法的执行效率要高效，长的文本也能快速地计算出Hash值。4.Hash算法的冲突概率要小&lt;/p&gt;
&lt;h5 id=&quot;为什么会冲突&quot;&gt;&lt;a href=&quot;#为什么会冲突&quot; class=&quot;headerlink&quot; title=&quot;为什么会冲突?&quot;&gt;&lt;/a&gt;为什么会冲突?&lt;/h5&gt;</summary>
    
    
    
    
    <category term="[object Object]" scheme="http://xieziqi.xyz/tags/object-Object/"/>
    
  </entry>
  
  <entry>
    <title>关于java中的逻辑操作符</title>
    <link href="http://xieziqi.xyz/2021/01/07/%E5%85%B3%E4%BA%8Ejava%E4%B8%AD%E7%9A%84%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>http://xieziqi.xyz/2021/01/07/%E5%85%B3%E4%BA%8Ejava%E4%B8%AD%E7%9A%84%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6/</id>
    <published>2021-01-07T03:46:15.000Z</published>
    <updated>2021-01-08T03:22:12.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="补码："><a href="#补码：" class="headerlink" title="补码："></a>补码：</h2><p>java程序中的运算都是补码运算</p><h2 id="位运算符和移位运算"><a href="#位运算符和移位运算" class="headerlink" title="位运算符和移位运算"></a>位运算符和移位运算</h2><table><thead><tr><th>位运算符</th><th>运算规则</th><th>举例</th></tr></thead><tbody><tr><td>按位与&amp;</td><td>两位全为1，结果为1</td><td>6&amp;3=2</td></tr><tr><td>按位或|</td><td>两位有一个1，结果为1</td><td>6|3=7</td></tr><tr><td>按位异或^</td><td>两个一个为0，一个为1， 结果为1</td><td>6^3=5</td></tr><tr><td>按位取反~</td><td>0-&gt;1, 1-&gt;0, 符号位也要变</td><td>~6=-7</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td></td></tr><tr><td><code>&gt;&gt;</code></td><td>右移</td><td></td></tr><tr><td><code>&gt;&gt;&gt;</code></td><td>无符号右移</td><td></td></tr></tbody></table><a id="more"></a> <h2 id="1-lt-lt"><a href="#1-lt-lt" class="headerlink" title="1. &lt;&lt;"></a>1. &lt;&lt;</h2><p>&lt;&lt; 表示左移，不分正负数，低位补0</p><p><strong>e.g</strong>：1 &lt;&lt; 4 </p><p>​        0000 0001 左移4位  =&gt; 0001 0000  转换为十进制后等于 16</p><h2 id="2-gt-gt"><a href="#2-gt-gt" class="headerlink" title="2. &gt;&gt;"></a>2. &gt;&gt;</h2><p>“&gt;&gt;” </p><h2 id="3-gt-gt-gt"><a href="#3-gt-gt-gt" class="headerlink" title="3. &gt;&gt;&gt;"></a>3. &gt;&gt;&gt;</h2><h2 id="4-amp"><a href="#4-amp" class="headerlink" title="4. &amp;"></a>4. &amp;</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;补码：&quot;&gt;&lt;a href=&quot;#补码：&quot; class=&quot;headerlink&quot; title=&quot;补码：&quot;&gt;&lt;/a&gt;补码：&lt;/h2&gt;&lt;p&gt;java程序中的运算都是补码运算&lt;/p&gt;
&lt;h2 id=&quot;位运算符和移位运算&quot;&gt;&lt;a href=&quot;#位运算符和移位运算&quot; class=&quot;headerlink&quot; title=&quot;位运算符和移位运算&quot;&gt;&lt;/a&gt;位运算符和移位运算&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;位运算符&lt;/th&gt;
&lt;th&gt;运算规则&lt;/th&gt;
&lt;th&gt;举例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;按位与&amp;amp;&lt;/td&gt;
&lt;td&gt;两位全为1，结果为1&lt;/td&gt;
&lt;td&gt;6&amp;amp;3=2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位或|&lt;/td&gt;
&lt;td&gt;两位有一个1，结果为1&lt;/td&gt;
&lt;td&gt;6|3=7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位异或^&lt;/td&gt;
&lt;td&gt;两个一个为0，一个为1， 结果为1&lt;/td&gt;
&lt;td&gt;6^3=5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位取反~&lt;/td&gt;
&lt;td&gt;0-&amp;gt;1, 1-&amp;gt;0, 符号位也要变&lt;/td&gt;
&lt;td&gt;~6=-7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;lt;&lt;/td&gt;
&lt;td&gt;左移&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右移&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;无符号右移&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    
    <category term="[object Object]" scheme="http://xieziqi.xyz/tags/object-Object/"/>
    
  </entry>
  
  <entry>
    <title>idea常用快捷键</title>
    <link href="http://xieziqi.xyz/2020/12/28/idea%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://xieziqi.xyz/2020/12/28/idea%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2020-12-28T06:21:11.000Z</published>
    <updated>2021-01-07T12:58:23.446Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下Intellij IDEA常用到的一些还没记住的快捷键：</p><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>ctrl + alt + o</td><td>删除类中没有用到的package</td></tr><tr><td>ctrl + F12</td><td>弹出当前类中的方法集合</td></tr><tr><td>ctrl + j</td><td>可以自定义一些代码模板</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><a id="more"></a> ]]></content>
    
    
    <summary type="html">&lt;p&gt;总结一下Intellij IDEA常用到的一些还没记住的快捷键：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;ctrl + alt + o&lt;/td&gt;
&lt;td&gt;删除类中没有用到的package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl + F12&lt;/td&gt;
&lt;td&gt;弹出当前类中的方法集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl + j&lt;/td&gt;
&lt;td&gt;可以自定义一些代码模板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    
    <category term="IDEA" scheme="http://xieziqi.xyz/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>自定义SpringBoot-Starter</title>
    <link href="http://xieziqi.xyz/2020/12/15/%E8%87%AA%E5%AE%9A%E4%B9%89SpringBoot-Starter/"/>
    <id>http://xieziqi.xyz/2020/12/15/%E8%87%AA%E5%AE%9A%E4%B9%89SpringBoot-Starter/</id>
    <published>2020-12-15T09:00:38.000Z</published>
    <updated>2020-12-16T01:46:42.230Z</updated>
    
    <content type="html"><![CDATA[<p>使用工具IDEA 2020.1.1</p><p>1.首先任意创建一个project，使用Spring initializer即可</p><p><img src="/2020/12/15/%E8%87%AA%E5%AE%9A%E4%B9%89SpringBoot-Starter/step1.png" alt></p><p>2.接下来正常取名，一直next就可以了</p><p>3.项目成功后，删除一些不必要的部分，例如mvn、test文件夹等</p><a id="more"></a> <p>4.有了一个清爽的项目结构后，创建三个文件夹：configure, properties, service，并且在resources文件夹下创建文件夹META-INF，继续在里面创建spring.factories文件，如下图所示</p><p><img src="/2020/12/15/%E8%87%AA%E5%AE%9A%E4%B9%89SpringBoot-Starter/step2.png" alt></p><p>5.在pom.xml引入</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>   <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>   <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>configuration<span class="token operator">-</span>processor<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>   <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>6.编写starter所需的properties文件，下面是sms短信服务例子</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"sms"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmsProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String accessKeyId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String accessKeySecret<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面省略setter/getter方法，用到了<font color="#FF0000">  @ConfigurationProperties </font> 注解，规定了两个属性：accessKeyId和accessKeySecret </p><p>7.接下来在service文件夹中创建一个发送信息的服务，相当于一个普通的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>8.在configure文件夹下创建<font color="blue">  SmsAutoConfiguration </font>，指定<font color="#FF0000">  @EnableConfigurationProperties(SmsProperties.class) </font> 注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>SmsProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmsAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SmsSendService <span class="token function">sendSmsService</span><span class="token punctuation">(</span>SmsProperties smsProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SmsSendService</span><span class="token punctuation">(</span>smsProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>9.最后在spring.factories中写入</p><pre class=" language-java"><code class="language-java">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>EnableAutoConfiguration<span class="token operator">=</span>\  com<span class="token punctuation">.</span>anzhi<span class="token punctuation">.</span>sms<span class="token punctuation">.</span>starter<span class="token punctuation">.</span>configure<span class="token punctuation">.</span>SmsAutoConfiguration</code></pre><p>10.用maven打包一下，就会存放在本地仓库，然后就可以在别的项目中使用这个starter了！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用工具IDEA 2020.1.1&lt;/p&gt;
&lt;p&gt;1.首先任意创建一个project，使用Spring initializer即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/12/15/%E8%87%AA%E5%AE%9A%E4%B9%89SpringBoot-Starter/step1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;2.接下来正常取名，一直next就可以了&lt;/p&gt;
&lt;p&gt;3.项目成功后，删除一些不必要的部分，例如mvn、test文件夹等&lt;/p&gt;</summary>
    
    
    
    
    <category term="Spring" scheme="http://xieziqi.xyz/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose实现mysql</title>
    <link href="http://xieziqi.xyz/2020/12/15/docker-compose%E5%AE%9E%E7%8E%B0mysql/"/>
    <id>http://xieziqi.xyz/2020/12/15/docker-compose%E5%AE%9E%E7%8E%B0mysql/</id>
    <published>2020-12-15T08:57:16.000Z</published>
    <updated>2020-12-15T08:59:44.481Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/12/15/docker-compose%E5%AE%9E%E7%8E%B0mysql/1.png" alt="1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2020/12/15/docker-compose%E5%AE%9E%E7%8E%B0mysql/1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker 安装 MongoDB</title>
    <link href="http://xieziqi.xyz/2020/11/12/docker%20%E5%AE%89%E8%A3%85%20MongoDB/"/>
    <id>http://xieziqi.xyz/2020/11/12/docker%20%E5%AE%89%E8%A3%85%20MongoDB/</id>
    <published>2020-11-12T09:37:52.328Z</published>
    <updated>2020-11-23T02:44:26.290Z</updated>
    
    <content type="html"><![CDATA[<h5 id="环境：阿里云ECS-Ubuntu-16-04"><a href="#环境：阿里云ECS-Ubuntu-16-04" class="headerlink" title="环境：阿里云ECS Ubuntu 16.04"></a>环境：阿里云ECS Ubuntu 16.04</h5><pre class=" language-shell"><code class="language-shell"># 市场里查找mongo镜像docker search mongoDB# 拉取镜像docker pull mongo:latest# 查看已拉取的镜像docker images# 发现有 无用的镜像 删除~docker rmi -f $(docker images | grep "none" | awk '{print $3}')# 运行 mongo 容器docker run -itd --name mongo -p 27017:27017 mongo --auth# 进入容器内部docker exec -it mongo mongo admin</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;环境：阿里云ECS-Ubuntu-16-04&quot;&gt;&lt;a href=&quot;#环境：阿里云ECS-Ubuntu-16-04&quot; class=&quot;headerlink&quot; title=&quot;环境：阿里云ECS Ubuntu 16.04&quot;&gt;&lt;/a&gt;环境：阿里云ECS Ubuntu 16.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://xieziqi.xyz/2020/08/03/git/"/>
    <id>http://xieziqi.xyz/2020/08/03/git/</id>
    <published>2020-08-03T02:39:02.082Z</published>
    <updated>2020-08-03T02:39:02.082Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>linux</title>
    <link href="http://xieziqi.xyz/2020/07/31/linux/"/>
    <id>http://xieziqi.xyz/2020/07/31/linux/</id>
    <published>2020-07-31T03:26:43.394Z</published>
    <updated>2020-08-03T07:03:07.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><pre class=" language-shell"><code class="language-shell"># cp命令用来复制文件。下面的命令将文件file1复制到文件file2：cp file1 file2# 下面的命令将多个文件（ file1 ... fileN）复制到目录dir：cp file1 ... fileN dir</code></pre><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>exec -it <id> /bin/bash</id></td><td>进入容器内部</td></tr><tr><td>ps -a</td><td></td></tr><tr><td>ps</td><td></td></tr><tr><td>start</td><td></td></tr><tr><td>restart</td><td></td></tr><tr><td>kill</td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><pre class=" language-doc"><code class="language-doc"># 在Dockerfile中添加，保持容器和宿主机时间同步RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo 'Asia/Shanghai' >/etc/timezone设置docker系统启动：systemctl enable docker启动docker:  systemctl start docker查看docker状态： systemctl status docker停止: systemctl stop docker重启: systemctl restart docker查看所有容器列表：docker ps –a查看启动的容器列表：docker ps启动容器：docker start 容器ID或容器名重启容器：docker restart 容器ID或容器名限时关闭容器：docker -t stop 容器ID或容器名,如60秒以内关闭容器：docker -60 stop,容器60秒以内未关闭，则直接关闭容器。直接关闭容器：docker kill 容器ID或容器名删除终止状态的容器：docker rm 容器id删除运行中的容器：docker rm -f 容器id停止所有容器：docker stop $(docker ps -a -q)删除所有终止状态的容器：docker rm $(docker ps -a -q)查看镜像列表：docker images删除镜像：docker rmi <image id> 或者docker rmi 镜像名称：版本（TAG）删除id为none的镜像：docker rmi $(docker images | grep "^<none>" | awk "{print $3}")删除所有未使用的镜像：docker rmi $(docker images -q)查看容器日志：docker logs 容器id</code></pre><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-i</td><td>不区分大小写</td></tr><tr><td>-v</td><td>反转匹配</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p>当要查看的文件过大或者内容多得需要滚动屏幕的时候，可以使用less命令。  </p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>b/d</td><td>向前翻一页/向后翻半页</td></tr><tr><td>/&lt;查询字符串&gt;</td><td>向下搜索”字符串”的功能</td></tr><tr><td>?&lt;查询字符串&gt;</td><td>向上搜索”字符串”的功能</td></tr><tr><td>空格键</td><td>滚动一页</td></tr><tr><td>-N</td><td>显示每行的行号</td></tr><tr><td>-o &lt;文件名&gt;</td><td>将less 输出的内容在指定文件中保存起来</td></tr><tr><td>[pagedown]</td><td>向下翻动一页</td></tr><tr><td>[pageup]</td><td>向上翻动一页</td></tr><tr><td>G/g</td><td></td></tr></tbody></table><pre class=" language-shell"><code class="language-shell"># ps查看进程信息并通过less分页显示ps -ef | less# 查看命令历史使用记录并通过less分页显示history | less</code></pre><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-f</td><td>循环读取</td></tr><tr><td>-q</td><td>不显示处理信息</td></tr><tr><td>-v</td><td>显示详细的处理信息</td></tr><tr><td>-c&lt;数目&gt;</td><td>显示的字节数</td></tr><tr><td>-n&lt;行数&gt;</td><td>显示文件的尾部 n 行内容</td></tr><tr><td>-pid</td><td>与-f合用,表示在进程ID,PID死掉之后结束</td></tr><tr><td>-q</td><td>从不输出给出文件名的首部</td></tr><tr><td>-s</td><td>与-f合用,表示在每次反复的间隔休眠S秒</td></tr></tbody></table><pre class=" language-shell"><code class="language-shell">tail -n 100 /etc/cron  #显示最后100行数据tail -n -100 /etc/cron #除了前99行不显示外，显示第100行到末尾行</code></pre><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>HOME/END</td><td>移动光标到行首/行尾</td></tr><tr><td>Page Up/Page Down</td><td>上/下翻页</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;cp&quot;&gt;&lt;a href=&quot;#cp&quot; class=&quot;headerlink&quot; title=&quot;cp&quot;&gt;&lt;/a&gt;cp&lt;/h2&gt;&lt;pre class=&quot; language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;# cp命令用来复制文件。下面</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring的注解相关</title>
    <link href="http://xieziqi.xyz/2020/06/05/java/"/>
    <id>http://xieziqi.xyz/2020/06/05/java/</id>
    <published>2020-06-05T01:36:52.000Z</published>
    <updated>2020-11-23T03:13:33.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移除-Autowired"><a href="#移除-Autowired" class="headerlink" title="移除@Autowired"></a>移除@Autowired</h1><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Validated</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// final 确保依赖不为null 单例还有线程问题</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> IUserService userService<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>hello</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移除-Autowired&quot;&gt;&lt;a href=&quot;#移除-Autowired&quot; class=&quot;headerlink&quot; title=&quot;移除@Autowired&quot;&gt;&lt;/a&gt;移除@Autowired&lt;/h1&gt;&lt;pre class=&quot; language-java&quot;&gt;&lt;code</summary>
      
    
    
    
    <category term="JAVA" scheme="http://xieziqi.xyz/categories/JAVA/"/>
    
    
    <category term="JAVA" scheme="http://xieziqi.xyz/tags/JAVA/"/>
    
    <category term="Spring" scheme="http://xieziqi.xyz/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>android</title>
    <link href="http://xieziqi.xyz/2020/06/03/android/"/>
    <id>http://xieziqi.xyz/2020/06/03/android/</id>
    <published>2020-06-03T12:33:08.000Z</published>
    <updated>2020-11-23T02:39:10.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="消息提示框"><a href="#消息提示框" class="headerlink" title="消息提示框"></a>消息提示框</h2><pre class=" language-java"><code class="language-java">Toast toast<span class="token operator">=</span>Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> “我是消息Toast”<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">;</span>toast<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第一个参数：当前的上下文环境。可用getApplicationContext()或this</span><span class="token comment" spellcheck="true">// 第二个参数：要显示的字符串。也可是R.string中字符串ID</span><span class="token comment" spellcheck="true">// 第三个参数：显示的时间长短。Toast默认的有两个LENGTH_LONG(长)和LENGTH_SHORT(短)，也可以使用毫秒如2000ms</span></code></pre><h2 id="查看安卓手机ip地址"><a href="#查看安卓手机ip地址" class="headerlink" title="查看安卓手机ip地址"></a>查看安卓手机ip地址</h2><pre class=" language-she"><code class="language-she">adb shell ip -f inet addr show wlan0</code></pre><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// scrollview</span><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>ScrollView    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@color/colorTheme"</span>    xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ScrollView<span class="token operator">></span></code></pre><h2 id="开一个线程"><a href="#开一个线程" class="headerlink" title="开一个线程"></a>开一个线程</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里写入子线程需要做的工作</span>        <span class="token function">makeToast</span><span class="token punctuation">(</span><span class="token string">"出库成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="自定义ProgressBar"><a href="#自定义ProgressBar" class="headerlink" title="自定义ProgressBar"></a>自定义ProgressBar</h2><pre class=" language-java"><code class="language-java"></code></pre><h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><pre class=" language-java"><code class="language-java"></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;消息提示框&quot;&gt;&lt;a href=&quot;#消息提示框&quot; class=&quot;headerlink&quot; title=&quot;消息提示框&quot;&gt;&lt;/a&gt;消息提示框&lt;/h2&gt;&lt;pre class=&quot; language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;Toast</summary>
      
    
    
    
    <category term="Android" scheme="http://xieziqi.xyz/categories/Android/"/>
    
    
    <category term="安卓相关" scheme="http://xieziqi.xyz/tags/%E5%AE%89%E5%8D%93%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>springcloud</title>
    <link href="http://xieziqi.xyz/2020/06/02/springcloud/"/>
    <id>http://xieziqi.xyz/2020/06/02/springcloud/</id>
    <published>2020-06-02T02:38:44.000Z</published>
    <updated>2020-06-02T02:42:22.129Z</updated>
    
    <content type="html"><![CDATA[<p>ELK</p><pre class=" language-yam"><code class="language-yam">version: '3'services:   elasticsearch:    image: elasticsearch:6.4.1    container_name: elasticsearch    environment:      - "cluster.name=elasticsearch" #集群名称为elasticsearch      - "discovery.type=single-node" #单节点启动      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"    volumes:      - /az/elasticsearch/plugins:/usr/share/elasticsearch/plugins      - /az/elasticsearch/data:/usr/share/elasticsearch/data    ports:      - 9200:9200  kibana:    image: kibana:6.4.1    container_name: kibana    links:       - elasticsearch:es #配置elasticsearch的域名为es    depends_on:       - elasticsearch    environment:      - "elasticsearch.hosts=http://es:9200"    ports:      - 5601:5601  logstash:    image: logstash:6.4.1    container_name: logstash    volumes:      - /az/logstash/logstash-az.conf:/usr/share/logstash/pipeline/logstash.conf     depends_on:      - elasticsearch    links:       - elasticsearch:es    ports:      - 4560:4560         </code></pre><p>带着变量启动jar包  </p><pre class=" language-sh"><code class="language-sh">java(java命令) -jar(执行jar包命令) xxx.jar(要执行的jar包) --params(参数名)=aaa(参数值) --params2(参数名)=bbb(参数值)java -jar xxx.jar --params=aaa --params=bbb</code></pre><p>参数如下</p><pre class=" language-sh"><code class="language-sh">redis.url=47.112.16.168;rabbitmq.url=127.0.0.1;az-gateway=127.0.0.1;az-monitor-admin=127.0.0.1;az-register=127.0.0.1</code></pre><p>Dockerfile</p><pre class=" language-dockerfile"><code class="language-dockerfile">FROM openjdk:8u212-jreMAINTAINER anzhi 562966183@qq.comCOPY az-auth-1.0-SNAPSHOT.jar /az/az-auth-1.0-SNAPSHOT.jarENTRYPOINT ["java", "-Xmx512m", "-jar", "/az/az-auth-1.0-SNAPSHOT.jar"]COPY az-auth-1.0-SNAPSHOT.jar /az/az-auth-1.0-SNAPSHOT.jar  表示将当前目录（/az/az-auth）az-auth-1.0-SNAPSHOT.jar拷贝到openjdk:8u212-jre镜像里的/az目录下，名称也为az-auth-1.0-SNAPSHOT.jar；# 创建镜像docker build -t xxx .</code></pre><p>删除image，通过image的id来指定删除谁</p><p>docker rmi <image id></image></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ELK&lt;/p&gt;
&lt;pre class=&quot; language-yam&quot;&gt;&lt;code class=&quot;language-yam&quot;&gt;version: &#39;3&#39;
services: 
  elasticsearch:
    image: elasticsearch:6.4.1
   </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xieziqi.xyz/2020/06/01/hello-world/"/>
    <id>http://xieziqi.xyz/2020/06/01/hello-world/</id>
    <published>2020-06-01T11:53:35.850Z</published>
    <updated>2020-06-01T11:53:35.850Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.</summary>
      
    
    
    
    
  </entry>
  
</feed>
